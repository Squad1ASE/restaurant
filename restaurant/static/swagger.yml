openapi: 3.0.1
info:
  title: Restaurants Service API
  description: Restaurants from GoOutSafe with Microservices
  version: "0.1"
servers:
- url: /
paths:
  /restaurants:
    get:
      tags:
      - Restaurants
      summary: Get all restaurants
      operationId: views.restaurant.get_restaurants
      responses:
        200:
          description: Return all restaurants
          content:
            application/json:
              schema:
                type: object
                properties:
                  restaurants:
                    type: array
                    items:
                      $ref: '#/components/schemas/Restaurant'              
    put:
      tags:
      - Restaurants
      summary: Get all restaurants
      operationId: views.restaurant.create_restaurant
      requestBody:
        description: Restaurant to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restaurant'
      responses:
        200:
          description: Restaurant successfully created
          content:
            text/plain:
              schema:
                type: string
                example: Restaurant successfully created
                      
  /restaurants/{restaurant_id}:
    get:
      tags:
      - Restaurants
      summary: Get a single restaurant
      operationId: views.restaurant.get_restaurant
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        example: 12
        schema:
          type: integer
          minimum: 1
      responses:
        200:
          description: Return restaurant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        404:
          description: Restaurant does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'

    post:
      tags:
      - Restaurants
      summary: Edit a restaurant
      operationId: views.restaurant.edit_restaurant
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        example: 12
        schema:
          type: integer
          minimum: 1

      requestBody:
        description: Restaurant info to edit
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  $ref: '#/components/schemas/Restaurant/properties/phone'
                tables:
                  $ref: '#/components/schemas/Restaurant/properties/tables'
              minProperties: 1

      responses:
        200:
          description: Restaurant successfully edited
          content:
            text/plain:
              schema:
                type: string
                example: Restaurant successfully edited
        404:
          description: Restaurant does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'

components:
  schemas:
    Restaurant:
      required:
      - id
      - owner_id
      - name
      - lat
      - lon
      - phone
      - capacity
      - prec_measures
      - cuisine_type
      - avg_time_of_stay
      - tot_reviews
      - avg_rating
      - likes
      - tables
      type: object
      properties:
        id:
          minimum: 1
          type: integer
          description: Unique identifier
          readOnly: true
          example: 123
        owner_id:
          minimum: 1
          type: integer
          description: Unique identifier of restaurant owner
          example: 123
        name:
          maxLength: 128
          minLength: 1
          type: string
          description: Restaurant's name
          example: "My Pizza Restaurant"
        lat:
          type: number
          description: Restaurant latitude
          example: 42.42
        lon:
          type: number
          description: Restaurant longitude
          example: 42.42
        phone:
          type: string
          minLength: 1
          maxLength: 128
          description: Restaurant phone number
          example: "050123456"
        capacity:
          type: integer
          description: Restaurant capacity
          readOnly: true
          example: 35
        prec_measures:
          maxLength: 128
          type: string
          description: Precautionary measures taken by the restaurant
          example: "Adopted the measures envisaged by the DPCM 'X'"
        cuisine_type:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            type: string
            minLength: 1
            maxLength: 128
            enum: [traditional, italian, mexican, chinese, pizzeria]
            description: Cuisine type
            example: "italian"
          description: List of restaurant cuisine types
          example: ["italian", "traditional"]
        avg_time_of_stay:
          minimum: 15
          type: integer
          description: Average time a customer stays to eat (expressed in minutes)
          example: 40
        tot_reviews:
          minimum: 0
          readOnly: true
          type: integer
          description: Total restaurant reviews
          example: 42
        avg_rating:
          minimum: 0
          maximum: 5
          readOnly: true
          type: number
          description: Restaurant average rating
          example: 3.5
        likes:
          minimum: 0
          readOnly: true
          type: integer
          description: Restaurant likes
          example: 100
        tables:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Table'
          description: List of restaurant tables
    Table:
      required:
      - id
      - restaurant_id
      - name
      - capacity
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier
          readOnly: true
          example: 123
        restaurant_id:
          minimum: 1
          type: integer
          description: Unique identifier of restaurant
          readOnly: true
          example: 123
        name:
          maxLength: 128
          minLength: 1
          type: string
          description: Table's name
          example: "yellow-table"
        capacity:
          minimum: 1
          type: integer
          description: Table capacity
          example: 5
    Error404:
      required:
      - detail
      - status
      - title
      - type
      type: object
      properties:
        detail:
          minLength: 1
          type: string
          description: Error detail
          readOnly: true
          example: "There is no restaurant with the specified id"
        status:
          minimum: 0
          type: integer
          description: Status code
          readOnly: true
          example: 404
        title:
          minLength: 1
          type: string
          description: Error title
          readOnly: true
          example: "Not found"
        type:
          minLength: 1
          type: string
          description: Error type
          readOnly: true
          example: "about:blank"
openapi: 3.0.1
info:
  title: Restaurants Service API
  description: Restaurants from GoOutSafe with Microservices
  version: "0.1"
servers:
- url: /
paths:
  /restaurants:
    get:
      tags:
      - Restaurants
      summary: Get all restaurants
      operationId: views.restaurant.get_restaurants
      parameters:
      - name: owner_id
        in: query
        schema:
          $ref: '#/components/schemas/Restaurant/properties/owner_id'
      - name: name
        in: query
        schema:
          $ref: '#/components/schemas/Restaurant/properties/name'
      - name: lat
        in: query
        schema:
          $ref: '#/components/schemas/Restaurant/properties/lat'
      - name: lon
        in: query
        schema:
          $ref: '#/components/schemas/Restaurant/properties/lon'
      - name: cuisine_type
        in: query
        schema:
          $ref: '#/components/schemas/Restaurant/properties/cuisine_type'
      responses:
        200:
          description: Return all restaurants
          content:
            application/json:
              schema:
                type: object
                properties:
                  restaurants:
                    type: array
                    items:
                      $ref: '#/components/schemas/Restaurant'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
             
    put:
      tags:
      - Restaurants
      summary: Create a new restaurant
      operationId: views.restaurant.create_restaurant
      requestBody:
        description: Restaurant to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restaurant'
      responses:
        200:
          description: Restaurant successfully created
          content:
            text/plain:
              schema:
                type: string
                example: Restaurant successfully created
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: "Request body is not valid JSON"
                status: 400
                title: "Bad Request"
                type: "about:blank"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      tags:
      - Restaurants
      summary: Delete all restaurants of an owner
      operationId: views.restaurant.delete_restaurants
      requestBody:
        description: Unique ID of the restaurants owner
        required: true
        content:
          application/json:
            schema:
              required:
              - owner_id
              type: object
              properties:
                owner_id:
                  $ref: '#/components/schemas/Restaurant/properties/owner_id'
      responses:
        200:
          description: Restaurants successfully deleted
          content:
            text/plain:
              schema:
                type: string
                example: Restaurants successfully deleted
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /restaurants/{restaurant_id}:
    get:
      tags:
      - Restaurants
      summary: Get a single restaurant
      operationId: views.restaurant.get_restaurant
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true
        example: 12
        schema:
          type: integer
          minimum: 1
      responses:
        200:
          description: Return restaurant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: "'restaurant_id' must be greater than 0"
                status: 400
                title: "Bad Request"
                type: "about:blank"
        404:
          description: Restaurant does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: "There is no restaurant with the specified id"
                status: 404
                title: "Not found"
                type: "about:blank"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
      - Restaurants
      summary: Edit a restaurant
      operationId: views.restaurant.edit_restaurant
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true 
        example: 12
        schema:
          type: integer
          minimum: 1
      requestBody:
        description: Restaurant info to edit
        required: true
        content:
          application/json:
            schema:
              required:
              - owner_id
              type: object
              properties:
                owner_id:
                  $ref: '#/components/schemas/Restaurant/properties/owner_id'
                phone:
                  $ref: '#/components/schemas/Restaurant/properties/phone'
                dishes:
                  $ref: '#/components/schemas/Restaurant/properties/dishes'
              minProperties: 2
      responses:
        200:
          description: Restaurant successfully edited
          content:
            text/plain:
              schema:
                type: string
                example: Restaurant successfully edited
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: "Request body is not valid JSON"
                status: 400
                title: "Bad Request"
                type: "about:blank"
        403:
          description: Specified owner_id is not the restaurant owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: "Specified owner_id is not the restaurant owner"
                status: 403
                title: "Forbidden"
                type: "about:blank"
        404:
          description: Restaurant does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: "There is no restaurant with the specified id"
                status: 404
                title: "Not found"
                type: "about:blank"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
      - Restaurants
      summary: Delete a restaurant
      operationId: views.restaurant.delete_restaurant
      parameters:
      - name: restaurant_id
        in: path
        description: Restaurant's Unique identifier
        required: true 
        example: 12
        schema:
          type: integer
          minimum: 1
      requestBody:
        description: Unique ID of the restaurant owner
        required: true
        content:
          application/json:
            schema:
              required:
              - owner_id
              type: object
              properties:
                owner_id:
                  $ref: '#/components/schemas/Restaurant/properties/owner_id'
      responses:
        200:
          description: Restaurant successfully deleted
          content:
            text/plain:
              schema:
                type: string
                example: Restaurant successfully deleted
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: "Request body is not valid JSON"
                status: 400
                title: "Bad Request"
                type: "about:blank"
        403:
          description: Specified owner_id is not the restaurant owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: "Specified owner_id is not the restaurant owner"
                status: 403
                title: "Forbidden"
                type: "about:blank"
        404:
          description: Restaurant does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: "There is no restaurant with the specified id"
                status: 404
                title: "Not found"
                type: "about:blank"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /likes:       
    put:
      tags:
      - Likes
      summary: Put a new like 
      operationId: views.like.create_like
      requestBody:
        description: Like to put
        required: true
        content:
          application/json:
            schema:
              required:
              - user_id
              - restaurant_id
              type: object
              properties:
                user_id:
                  minimum: 1
                  type: integer
                  description: Unique identifier of user
                  example: 123
                restaurant_id:
                  minimum: 1
                  type: integer
                  description: Unique identifier of restaurant
                  example: 5
      responses:
        200:
          description: Like successfully put
          content:
            text/plain:
              schema:
                type: string
                example: Like successfully put
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: "Request body is not valid JSON"
                status: 400
                title: "Bad Request"
                type: "about:blank"
        403:
          description: A user cannot like the same restaurant multiple times
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: "A user cannot like the same restaurant multiple times"
                status: 403
                title: "Forbidden"
                type: "about:blank"
        404:
          description: Restaurant does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: "There is no restaurant with the specified id"
                status: 404
                title: "Not found"
                type: "about:blank"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /reviews:       
    get:
      tags:
      - Reviews
      summary: Get all reviews
      operationId: views.review.get_reviews
      parameters:
      - name: user_id
        in: query
        schema:
          $ref: '#/components/schemas/Review/properties/user_id'
      - name: restaurant_id
        in: query
        schema:
          $ref: '#/components/schemas/Review/properties/restaurant_id'
      responses:
        200:
          description: Return all reviews
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      tags:
      - Reviews
      summary: Make a review
      operationId: views.review.create_review
      requestBody:
        description: Review to make
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        200:
          description: Review successfully made
          content:
            text/plain:
              schema:
                type: string
                example: Review successfully made
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: "Request body is not valid JSON"
                status: 400
                title: "Bad Request"
                type: "about:blank"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                   
components:
  schemas:
    Restaurant:
      required:
      - id
      - owner_id
      - name
      - lat
      - lon
      - phone
      - capacity
      - prec_measures
      - cuisine_type
      - avg_time_of_stay
      - tot_reviews
      - avg_rating
      - likes
      - tables
      - working_days
      - dishes
      type: object
      properties:
        id:
          minimum: 1
          type: integer
          description: Unique identifier
          readOnly: true
          example: 123
        owner_id:
          minimum: 1
          type: integer
          description: Unique identifier of restaurant owner
          example: 123
        name:
          maxLength: 128
          minLength: 1
          type: string
          description: Restaurant's name
          example: "My Pizza Restaurant"
        lat:
          type: number
          description: Restaurant latitude
          example: 43.7216621
        lon:
          type: number
          description: Restaurant longitude
          example: 10.4083723
        phone:
          type: string
          minLength: 1
          maxLength: 128
          description: Restaurant phone number
          example: "050123456"
        capacity:
          type: integer
          description: Restaurant capacity
          readOnly: true
          example: 35
        prec_measures:
          maxLength: 128
          type: string
          description: Precautionary measures taken by the restaurant
          example: "Adopted the measures envisaged by the DPCM 'X'"
        cuisine_type:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            type: string
            minLength: 1
            maxLength: 128
            enum: [traditional, italian, mexican, chinese, pizzeria]
            description: Cuisine type
            example: "italian"
          description: List of restaurant cuisine types
          example: ["italian", "traditional"]
        avg_time_of_stay:
          minimum: 15
          type: integer
          description: Average time a customer stays to eat (expressed in minutes)
          example: 40
        tot_reviews:
          minimum: 0
          readOnly: true
          type: integer
          description: Total restaurant reviews
          example: 42
        avg_rating:
          minimum: 0
          maximum: 5
          readOnly: true
          type: number
          description: Restaurant average rating
          example: 3.5
        likes:
          minimum: 0
          readOnly: true
          type: integer
          description: Restaurant likes
          example: 100
        tables:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Table'
          description: List of restaurant tables
        working_days:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/WorkingDay'
          description: List of working days
        dishes:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Dish'
          description: List of restaurant dishes
    Table:
      required:
      - id
      - restaurant_id
      - name
      - capacity
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier
          readOnly: true
          example: 123
        restaurant_id:
          minimum: 1
          type: integer
          description: Unique identifier of restaurant
          readOnly: true
          example: 123
        name:
          maxLength: 128
          minLength: 1
          type: string
          description: Table's name
          example: "yellow-table"
        capacity:
          minimum: 1
          type: integer
          description: Table capacity
          example: 5
    WorkingDay:
      required:
      - restaurant_id
      - day
      - work_shifts
      type: object
      properties:
        restaurant_id:
          minimum: 1
          type: integer
          description: Unique identifier of restaurant
          readOnly: true
          example: 123
        day:
          type: string
          minLength: 1
          maxLength: 128
          enum: [monday, tuesday, wednesday, thursday, friday, saturday, sunday]
          description: Week day
          example: "saturday"
        work_shifts:
          type: array
          minItems: 1
          maxItems: 2
          uniqueItems: true
          description: List of work shifts
          example: [["12:00", "15:00"], ["19:00", "23:00"]]
          items:
            type: array
            minItems: 2
            maxItems: 2
            description: Pair indicating the opening and closing times of a work shift
            example: ["19:00", "23:00"]
            items:
              type: string
              minItems: 2
              maxItems: 2
              pattern: '^\d{2}:\d{2}$'
              description: Hour
              example: "12:00"
    Dish:
      required:
      - id
      - restaurant_id
      - name
      - price
      - ingredients
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier
          readOnly: true
          example: 123
        restaurant_id:
          minimum: 1
          type: integer
          description: Unique identifier of restaurant
          readOnly: true
          example: 123
        name:
          maxLength: 128
          minLength: 1
          type: string
          description: Dish name
          example: "pizza"
        price:
          minimum: 0.01
          type: number
          description: Dish price
          example: 4.5
        ingredients:
          maxLength: 128
          minLength: 1
          type: string
          description: Dish ingredients
          example: "tomato, mozzarella"
    Review:
      required:
      - user_id
      - restaurant_id
      - comment
      - rating
      - date
      type: object
      properties:
        user_id:
          minimum: 1
          type: integer
          description: Unique identifier of user
          example: 123
        restaurant_id:
          minimum: 1
          type: integer
          description: Unique identifier of restaurant
          example: 5
        comment:
          maxLength: 128
          minLength: 1
          type: string
          description: Comment on restaurant
          example: "excellent!"
        rating:
          minimum: 1
          maximum: 5
          type: integer
          description: Rating from 1 to 5
          example: 4
        date:
          type: string
          readOnly: true
          pattern: '^\d{2}/\d{2}/\d{4}$'
          description: Date of review
          example: "17/12/2019"
    Error:
      required:
      - detail
      - status
      - title
      - type
      type: object
      properties:
        detail:
          minLength: 1
          type: string
          description: Error detail
          readOnly: true
          example: "The server encountered an internal error and was unable to complete your request"
        status:
          minimum: 0
          type: integer
          description: Status code
          readOnly: true
          example: 500
        title:
          minLength: 1
          type: string
          description: Error title
          readOnly: true
          example: "Internal Server Error"
        type:
          minLength: 1
          type: string
          description: Error type
          readOnly: true
          example: "about:blank"